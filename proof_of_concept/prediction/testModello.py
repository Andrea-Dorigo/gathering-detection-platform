# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i245Pzg7B84l-DfrFSWeUXZbS_A0t-XW
"""

# Remote data access for pandas
import pandas_datareader as webreader
# Mathematical functions 
import math 
# Fundamental package for scientific computing with Python
import numpy as np 
# Additional functions for analysing and manipulating data
import pandas as pd 
# Date Functions
from datetime import date, timedelta
# This function adds plotting functions for calender dates
from pandas.plotting import register_matplotlib_converters
# Important package for visualization - we use this to plot the market data
import matplotlib.pyplot as plt 
# Formatting dates
import matplotlib.dates as mdates
# Packages for measuring model performance / errors
from sklearn.metrics import mean_absolute_error, mean_squared_error
# Tools for predictive data analysis. We will use the MinMaxScaler to normalize the price data 
from sklearn.preprocessing import MinMaxScaler 
# Deep learning library, used for neural networks
from keras.models import Sequential 
# Deep learning classes for recurrent and regular densely-connected layers
from keras.layers import LSTM, Dense,Dropout
from random import *

train = [1,1,1,2,4,6,8,10,14,15,17,20,20,25,30,35,30,25,20,10]
train = np.array(train)
train1 = train
target = [0,1,1,1,2,5,8,10,15,18,20,25,25,28,30,37,23,20,10,8]
target = np.array(target)
index = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
index = np.array(index)
index1 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
index1 = np.array(index1)
test = [8,6,2,1]
test = np.array(test)

step=3
test = np.append(test, np.repeat(test[-1,], step))
train = np.append(train, np.repeat(train[-1,], step))

def convertToMatrix(data, step):
 X, Y =[], []
 for i in range(len(data)-step):
  d=i+step  
  X.append(data[i:d,])
  Y.append(data[d,])
 return np.array(X), np.array(Y)

trainX,trainY =convertToMatrix(train, step)
testX,testY =convertToMatrix(test, step)

print(testX.shape)

trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))
print(testX.shape)
indexTest = [21,22,23,24]

indexTest = np.array(indexTest)

# print(trainX)
# print(trainY)
from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range=(0,1))


X_gino = np.random.normal(0,1,144)
Y_gino = np.random.normal(0,1,144)

def normalize(arr, t_min, t_max): 
    norm_arr = [] 
    diff = t_max - t_min 
    diff_arr = max(arr) - min(arr)     
    for i in arr: 
        temp = (((i - min(arr))*diff)/diff_arr) + t_min 
        norm_arr.append(temp) 
    return norm_arr 
  
# gives range staring from 1 and ending at 3    
range_to_normalize = (0,1) 

step = 3
trainX_gino, trainY_gino = convertToMatrix(X_gino, step) 
testX_gino, testY_gino = convertToMatrix(Y_gino, step)

X_gino = normalize(X_gino,  range_to_normalize[0],  range_to_normalize[1]) 
Y_gino = normalize(Y_gino,  range_to_normalize[0],  range_to_normalize[1]) 
trainX_gino = sc.fit_transform(trainX_gino)
testX_gino = sc.fit_transform(testX_gino)

trainX_gino = np.reshape(trainX_gino, (trainX_gino.shape[0], 1, trainX_gino.shape[1]))
testX_gino = np.reshape(testX_gino, (testX_gino.shape[0], 1, testX_gino.shape[1]))
trainY_gino = np.reshape(trainY_gino,(-1,1))
trainY_gino = sc.fit_transform(trainY_gino)
testY_gino = np.reshape(testY_gino,(-1,1))
testY_gino = sc.fit_transform(testY_gino)
# print(trainX_gino.shape[0])
# print(trainY_gino.shape[0])

model = Sequential()
model.add(LSTM(units=32, return_sequences=True, input_shape=(1,step), activation="relu"))
model.add(Dropout(0.2))
# model.add
model.add(Dense(1))

import keras
opt = keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss='mean_squared_error', optimizer=opt, metrics=['accuracy'])

model.summary()

history = model.fit(trainX,trainY, epochs=100)
trainPredict = model.predict(trainX)
testPredict = model.predict(testX)
predicted = np.concatenate((trainPredict,testPredict),axis=0)
#print("----------")
#model.evaluate(testX_gino, testY_gino)
#plt.plot(history.history['accuracy'])
#plt.title('Model accuracy')
#plt.ylabel('Accuracy')
#plt.xlabel('Epoch')
#plt.legend(['Train', 'Test'], loc='upper left')
#plt.show()

predicted = np.reshape(predicted,(24,))
plt.plot(index,train1)
plt.plot(index1,predicted)

plt.show()